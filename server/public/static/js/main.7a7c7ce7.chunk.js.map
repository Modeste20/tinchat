{"version":3,"sources":["assets/cancel.jpg","data/en-CA.js","data/fr-CA.js","store/TranslationStore.js","store/AuthenticationStore.js","store/MessageStore.js","components/TranslationSwitch/TranslationSwitch.js","components/TranslationSwitch/index.js","utils/index.js","components/Notify/index.js","components/Notify/Notify.js","components/Authentication/Login.js","components/Authentication/Register.js","services/Service.js","services/AuthenticationService.js","services/UserSearchService.js","services/MessageService.js","components/Authentication/index.js","components/Avatar/index.js","components/Avatar/Avatar.js","components/Home/Home.js","components/UserCard/index.js","components/UserCard/UserCard.js","components/MessageCard/index.js","components/MessageCard/MessageCard.js","components/Home/index.js","Routes.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","__webpack_require__","p","en_CA","home","logout","typeMessagePlaceholder","searchPlaceholder","login","email","password","enterEmail","submit","gotoRegistration","register","firstName","lastName","gotoLogin","fr_CA","TranslationStore","_class","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","createClass","key","value","type","section","missingTranslation","concat","translation","sectionName","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","en-CA","enCA","fr-CA","frCA","action","getOwnPropertyDescriptor","AuthenticationStore","AuthenticationStore_class","AuthenticationStore_descriptor","AuthenticationStore_descriptor2","_descriptor3","_descriptor4","_descriptor5","nonObservableToken","cookies","Cookies","cookieToken","get","token","id","user","set","path","maxAge","config","cookieMaxAge","remove","MessageStore","MessageStore_class","MessageStore_descriptor","messages","TranslationSwitch","props","react_default","a","createElement","className","label","react_switch_default","checked","onChange","handleChange","onColor","offColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","height","width","TranslationSwitchContainer","inject","store","observer","_this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","setState","changeTranslations","bind","Component","min","max","Math","ceil","random","component","Notify","Utils","decorateWithMobX","Message","style","visibility","show","compact","floating","content","message","Container","components_Notify","showNotify","Row","Col","md","Form","onSubmit","Group","controlId","Label","getTranslation","Control","placeholder","Button","loading","formSubmitted","primary","Text","href","Service","_ref","method","url","data","options","restApiEndpoint","headers","authorization","axios","_ref2","request","_ref3","AuthenticationService","_Service","apply","arguments","inherits","form","elements","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","element","err","return","formData","parseFormData","post","UserSearchService","_search","asyncToGenerator","regenerator_default","mark","_callee","searchTerm","response","hits","result","wrap","_context","prev","query","bool","should","match_phrase_prefix","sent","body","map","_source","abrupt","stop","_x","_x2","MessageService","_getConversation","convoWith","page","limit","items","_x3","_x4","Authentication","callback","notificationTimeout","setTimeout","clearTimeout","authentication","storeAuthentication","showNotification","_this3","history","push","event","_this4","preventDefault","target","_callee2","_context2","authenticate","t0","Register","Login","withRouter","Avatar","size","firstLetter","recipient","selectedUsers","onLogout","onSendMessage","components_Avatar","toUpperCase","Dropdown","labeled","button","icon","Menu","Item","onClick","text","xs","onSearchChange","onUserSearch","onUserDropdownOptionSelect","fluid","search","selection","userDropdownOptions","userSearchLoading","onScroll","onMessageScroll","Loader","active","loaderActive","Input","onKeyDown","UserCard","name","length","substring","backgroundColor","selected","stopPropagation","onCloseUserCard","src","require","MessageCard","ref","messageRef","left","username","timestamp","HomeContainer","currentPage","socket","socketIOClient","socketEndpoint","on","messageResponse","from","toConsumableArray","components_MessageCard","moment","format","right","setMessagesState","refreshAuthentication","yCoordinate","scrollTop","scrollHeight","allMessagesRetrieved","itemsPerPage","messagesResponse","getConversation","_objectSpread","stateMessages","i","React","createRef","current","scrollIntoView","currentTarget","_callee3","results","_context3","forEach","states","setMessages","otherOptions","_this5","_callee6","_context6","sendMessage","to","status","_this6","_this$props$authentic","Home","keys","components_UserCard","onUserClick","react_router","components_Authentication","components_Home","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","mobx_react_module","components_TranslationSwitch","Routes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a7c7ce7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cancel.fbd28b8b.jpg\";","export default {\r\n    home: {\r\n        logout: 'Logout',\r\n        typeMessagePlaceholder: 'Type a message',\r\n        searchPlaceholder: 'Search...',\r\n    },\r\n    login: {\r\n        email: 'Email',\r\n        password: 'Password',\r\n        enterEmail: 'Enter Email',\r\n        submit: 'Submit',\r\n        gotoRegistration: 'Create an Account',\r\n    },\r\n    register: {\r\n        firstName: 'First Name',\r\n        lastName: 'Last Name',\r\n        gotoLogin: 'Already have an account? Sign in',\r\n    },\r\n};\r\n","export default {};\r\n","import {\r\n    observable,\r\n    action,\r\n} from 'mobx';\r\n\r\nimport enCA from '../data/en-CA';\r\nimport frCA from '../data/fr-CA';\r\n\r\nexport class TranslationStore {\r\n    @observable type = 'en-CA';\r\n    @observable translation = {\r\n        'en-CA': enCA,\r\n        'fr-CA': frCA,\r\n    };\r\n\r\n    @action changeTranslations (type) {\r\n        this.type = type;\r\n    }\r\n\r\n    getTranslation (section, key) {\r\n        let missingTranslation = key ? `?${section}-${key}?` : `?${section}?`;\r\n        if (section && key && this.translation[this.type] && this.translation[this.type][section] && this.translation[this.type][section][key]) {\r\n            const translation = this.translation[this.type][section][key];\r\n            if (typeof translation === 'string') {\r\n                return translation;\r\n            }\r\n        } else if (section && key) {\r\n            return missingTranslation;\r\n        } else if (section) {\r\n            key = section;\r\n            const translation = this.translation[this.type][key];\r\n            if (translation && typeof translation === 'string') {\r\n                return translation;\r\n            }\r\n            for (const sectionName in this.translation[this.type]) {\r\n                const section = this.translation[this.type][sectionName];\r\n                if (typeof section === 'object' && key in section && typeof section[key] === 'string') {\r\n                    return section[key];\r\n                }\r\n            }\r\n        }\r\n        return missingTranslation;\r\n    }\r\n}\r\n","import {\r\n    observable,\r\n    action,\r\n} from 'mobx';\r\n\r\nimport Cookies from 'universal-cookie';\r\nimport config from '../config.json';\r\n\r\nexport class AuthenticationStore {\r\n    // If any component's render depends on this attribute, then the component will instantly re-render.\r\n    @observable id = null;\r\n    @observable email = null;\r\n    @observable token = null;\r\n    @observable firstName = null;\r\n    @observable lastName = null;\r\n    // This variable is not reactive, meaning anything in render depending on this\r\n    // attribute will not cause instant re-render.\r\n    nonObservableToken = null;\r\n    cookies = null;\r\n\r\n    constructor () {\r\n        this.cookies = new Cookies();\r\n        const cookieToken = this.cookies.get('token');\r\n        this.token = cookieToken;\r\n        this.nonObservableToken = cookieToken;\r\n        this.id = this.cookies.get('id');\r\n        this.email = this.cookies.get('email');\r\n        this.firstName = this.cookies.get('firstName');\r\n        this.lastName = this.cookies.get('lastName');\r\n    }\r\n\r\n    @action storeAuthentication (user) {\r\n        this.nonObservableToken = user.token;\r\n        for (const key in user) {\r\n            this[key] = user[key];\r\n            this.cookies.set(key, user[key], {\r\n                path: '/',\r\n                maxAge: config.cookieMaxAge,\r\n            });\r\n        }\r\n    }\r\n\r\n    @action refreshAuthentication () {\r\n        this.token = null;\r\n        this.cookies.remove('token');\r\n        this.id = null;\r\n        this.cookies.remove('id');\r\n        this.email = null;\r\n        this.cookies.remove('email');\r\n        this.firstName = null;\r\n        this.cookies.remove('firstName');\r\n        this.lastName = null;\r\n        this.cookies.remove('lastName');\r\n    }\r\n}\r\n","import {\r\n    observable,\r\n    action,\r\n} from 'mobx';\r\n\r\n/**\r\n * This store serves as a cache for the message requests that\r\n * have been already retrieved from the server.\r\n */\r\nexport class MessageStore {\r\n    // Keys of this object will be user email and values will be array of message objects.\r\n    @observable messages = {}\r\n\r\n    @action storeMessage (messages) {\r\n        this.messages = messages;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Switch from 'react-switch';\r\n\r\nimport './styles.scss';\r\n\r\nexport default props => {\r\n    return (\r\n        <label className = 'translation-switch-container'>\r\n            <span>{ props.label }</span>\r\n            <Switch\r\n                className = 'translation-switch'\r\n                checked = { props.checked }\r\n                onChange = { props.handleChange }\r\n                onColor = \"#86d3ff\"\r\n                offColor = \"#86d3ff\"\r\n                handleDiameter = { 25 }\r\n                uncheckedIcon = { false }\r\n                checkedIcon = { false }\r\n                boxShadow = \"0px 1px 5px rgba(0, 0, 0, 0.6)\"\r\n                activeBoxShadow = \"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\r\n                height = { 20 }\r\n                width = { 48 }\r\n            />\r\n        </label>\r\n    );\r\n};\r\n","import React, { Component } from 'react';\r\nimport TranslationSwitch from './TranslationSwitch';\r\nimport {\r\n    inject,\r\n    observer,\r\n} from 'mobx-react';\r\n\r\n@inject(store => ({ translation: store.translation }))\r\n@observer\r\nclass TranslationSwitchContainer extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = { checked: false };\r\n    }\r\n\r\n    handleChange () {\r\n        const { translation } = this.props;\r\n        this.setState({\r\n            checked: !this.state.checked,\r\n        }, () => {\r\n            this.state.checked\r\n                ? translation.changeTranslations('fr-CA')\r\n                : translation.changeTranslations('en-CA');\r\n        });\r\n    }\r\n\r\n    render () {\r\n        const { translation } = this.props;\r\n        return (\r\n            <TranslationSwitch\r\n                label = { translation.type }\r\n                checked = { this.state.checked }\r\n                handleChange = { this.handleChange.bind(this) }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default TranslationSwitchContainer;\r\n","import {\r\n    inject,\r\n    observer,\r\n} from 'mobx-react';\r\n\r\nexport default class {\r\n    static getRandomNumber (min, max) {\r\n        return Math.ceil(Math.random() * (max + 1 - min));\r\n    }\r\n\r\n    static decorateWithMobX (component) {\r\n        return inject('message', 'authentication', 'translation')(observer(props => component(props)));\r\n    }\r\n}\r\n","import Notify from './Notify';\r\n\r\nexport default Notify;\r\n","import React from 'react';\r\nimport Utils from '../../utils';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\nimport './styles.scss';\r\n\r\nexport default Utils.decorateWithMobX(props => {\r\n    return (\r\n        <Message style = {{\r\n            visibility: props.show ? 'visible' : 'hidden',\r\n        }} compact className = 'notify' floating content = {props.message} />\r\n    );\r\n});\r\n","import React from 'react';\r\nimport Utils from '../../utils';\r\nimport { Container, Col, Row, Form } from 'react-bootstrap';\r\nimport { Button } from 'semantic-ui-react';\r\nimport Notify from '../Notify';\r\n\r\nimport './styles.scss';\r\n\r\nexport default Utils.decorateWithMobX(props => {\r\n    const { translation } = props;\r\n    return (\r\n        <Container>\r\n            <Notify\r\n                show = {props.showNotify}\r\n                message = {props.message}\r\n            />\r\n            <Row className = 'justify-content-md-center login-container'>\r\n                <Col md = {4}>\r\n                    <Form onSubmit = {props.onSubmit}>\r\n                        <Form.Group controlId = 'email'>\r\n                            <Form.Label>{translation.getTranslation('email')}</Form.Label>\r\n                            <Form.Control type = 'email' placeholder = {translation.getTranslation('enterEmail')} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId = 'password'>\r\n                            <Form.Label>{translation.getTranslation('password')}</Form.Label>\r\n                            <Form.Control type = 'password' placeholder = {translation.getTranslation('password')} />\r\n                        </Form.Group>\r\n                        <Button type = 'submit' loading = {props.formSubmitted} primary>\r\n                            {translation.getTranslation('submit')}\r\n                        </Button>\r\n                        <Form.Text className=\"text-muted authentication-link\">\r\n                            <a href='/register'>{translation.getTranslation('gotoRegistration')}</a>\r\n                        </Form.Text>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport Utils from '../../utils';\r\nimport { Container, Col, Row, Form } from 'react-bootstrap';\r\nimport { Button } from 'semantic-ui-react';\r\nimport Notify from '../Notify';\r\n\r\nimport './styles.scss';\r\n\r\nexport default Utils.decorateWithMobX(props => {\r\n    const { translation } = props;\r\n    return (\r\n        <Container>\r\n            <Notify\r\n                show = {props.showNotify}\r\n                message = {props.message}\r\n            />\r\n            <Row className = 'justify-content-md-center register-container'>\r\n                <Col md = {4}>\r\n                    <Form onSubmit = {props.onSubmit}>\r\n                        <Form.Group controlId = 'email'>\r\n                            <Form.Label>{translation.getTranslation('email')}</Form.Label>\r\n                            <Form.Control type = 'email' placeholder = {translation.getTranslation('enterEmail')} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId = 'password'>\r\n                            <Form.Label>{translation.getTranslation('password')}</Form.Label>\r\n                            <Form.Control type = 'password' placeholder = {translation.getTranslation('password')} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId = 'firstName'>\r\n                            <Form.Label>{translation.getTranslation('firstName')}</Form.Label>\r\n                            <Form.Control type = 'text' placeholder = {translation.getTranslation('firstName')} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId = 'lastName'>\r\n                            <Form.Label>{translation.getTranslation('lastName')}</Form.Label>\r\n                            <Form.Control type = 'text' placeholder = {translation.getTranslation('lastName')} />\r\n                        </Form.Group>\r\n                        <Button type = 'submit' loading = {props.formSubmitted} primary>\r\n                            {translation.getTranslation('submit')}\r\n                        </Button>\r\n                        <Form.Text className=\"text-muted authentication-link\">\r\n                            <a href='/login'>{translation.getTranslation('gotoLogin')}</a>\r\n                        </Form.Text>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n});\r\n","import { restApiEndpoint } from '../config.json';\r\nimport axios from 'axios';\r\n\r\nexport class Service {\r\n    static request ({ method, url, data, token }) {\r\n        const options = {\r\n            method,\r\n            url: `${restApiEndpoint}/${url}`,\r\n        };\r\n        if (token) {\r\n            options.headers = { 'authorization': `Bearer ${token}` };\r\n        }\r\n        if (data) {\r\n            options.data = data;\r\n        }\r\n        return axios(options);\r\n    }\r\n    static post ({ url, data, token }) {\r\n        return this.request({ method: 'POST', url, data, token });\r\n    }\r\n    static get ({ url, data, token }) {\r\n        return this.request({ method: 'GET', url, data, token });\r\n    }\r\n}\r\n","import { Service } from './Service';\r\n\r\nexport class AuthenticationService extends Service {\r\n    static parseFormData (form) {\r\n        const { elements } = form;\r\n        const data = {};\r\n        for (const element of elements) {\r\n            const { id, value } = element;\r\n            if (id) {\r\n                data[id] = value;\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n    static login (form) {\r\n        const formData = this.parseFormData(form);\r\n        return this.post({ url: `login`, data: formData });\r\n    }\r\n\r\n    static register (form) {\r\n        const formData = this.parseFormData(form);\r\n        return this.post({ url: `register`, data: formData });\r\n    }\r\n\r\n    static logout (token) {\r\n        return this.post({ url: 'logout', token });\r\n    }\r\n};\r\n","import { Service } from './Service';\r\n\r\nexport class UserSearchService extends Service {\r\n    static async search (searchTerm, token) {\r\n        const options = {\r\n            url: `api/search/user`,\r\n            token,\r\n            data: {\r\n                'query': {\r\n                    'bool': {\r\n                        'should': [\r\n                            // match_phrase prefix returns documents that contain the words of a provided text, in the same order as provided.\r\n                            { 'match_phrase_prefix': { 'firstName': searchTerm } },\r\n                            { 'match_phrase_prefix': { 'lastName': searchTerm } },\r\n                        ],\r\n                    },\r\n                },\r\n            },\r\n        };\r\n        const response = await this.post(options);\r\n        const { data: { body: { hits: { hits } } } } = response;\r\n        const result = hits.map(result => result._source);\r\n        return result;\r\n    }\r\n};\r\n","import { Service } from './Service';\r\n\r\nexport class MessageService extends Service {\r\n    static async getConversation (convoWith, page, limit, token) {\r\n        const response = await this.get({ url: `api/conversation?with=${convoWith}&page=${page}&limit=${limit}`, token });\r\n        return response && response.data && response.data.items;\r\n    }\r\n    static sendMessage (data, token) {\r\n        return this.post({ url: 'api/message', data, token });\r\n    }\r\n};\r\n","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Login from './Login';\r\nimport Register from './Register';\r\nimport { AuthenticationService } from '../../services';\r\n\r\n@inject('authentication')\r\n@observer\r\nclass Authentication extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            formSubmitted: false,\r\n            showNotify: false,\r\n            message: '',\r\n        };\r\n    }\r\n    showNotification (message, callback) {\r\n        this.setState({\r\n            showNotify: true,\r\n            formSubmitted: false,\r\n            message,\r\n        }, () => {\r\n            const notificationTimeout = setTimeout(() => {\r\n                this.setState({\r\n                    showNotify: false,\r\n                    message: '',\r\n                });\r\n            }, 3000);\r\n            if (typeof callback === 'function') {\r\n                clearTimeout(notificationTimeout);\r\n                callback();\r\n            }\r\n        });\r\n    }\r\n    storeAuthentication (response) {\r\n        const { data } = response;\r\n        const { authentication } = this.props;\r\n        authentication.storeAuthentication(data);\r\n    }\r\n    async authenticate (form) {\r\n        if (this.props.register) {\r\n            const response = await AuthenticationService.register(form);\r\n            this.storeAuthentication(response);\r\n            this.showNotification('Registration successful!', () => {\r\n                setTimeout(() => {\r\n                    this.props.history.push('/home');\r\n                }, 1000);\r\n            });\r\n        } else {\r\n            const response = await AuthenticationService.login(form);\r\n            this.storeAuthentication(response);\r\n            this.showNotification('Login successful!', () => {\r\n                setTimeout(() => {\r\n                    this.props.history.push('/home');\r\n                }, 700);\r\n            });\r\n        }\r\n    }\r\n    onSubmit (event) {\r\n        if (this.state.formSubmitted === true) return;\r\n        event.preventDefault();\r\n        const { target: form } = event;\r\n        this.setState({\r\n            formSubmitted: true,\r\n        }, async () => {\r\n            try {\r\n                await this.authenticate(form);\r\n            } catch (err) {\r\n                this.showNotification(err.message);\r\n            }\r\n        });\r\n    }\r\n    render () {\r\n        return (\r\n            this.props.register\r\n                ? <Register\r\n                    message = {this.state.message}\r\n                    showNotify = {this.state.showNotify}\r\n                    formSubmitted = {this.state.formSubmitted}\r\n                    onSubmit = {this.onSubmit.bind(this)}\r\n                />\r\n                : <Login\r\n                    message = {this.state.message}\r\n                    showNotify = {this.state.showNotify}\r\n                    formSubmitted = {this.state.formSubmitted}\r\n                    onSubmit = {this.onSubmit.bind(this)}\r\n                />\r\n        );\r\n    }\r\n};\r\n\r\nexport default withRouter(Authentication);\r\n","import Avatar from './Avatar';\r\n\r\nexport default Avatar;\r\n","import React from 'react';\r\nimport Utils from '../../utils';\r\n\r\nimport './styles.scss';\r\n\r\nexport default Utils.decorateWithMobX(props => {\r\n    const size = props.size === 'medium' ? 'medium' : 'small';\r\n    return (\r\n        <div className = {`avatar-container avatar-${size}`}>\r\n            {props.firstLetter}\r\n        </div>\r\n    );\r\n});\r\n","import React from 'react';\r\nimport { Container, Col, Row } from 'react-bootstrap';\r\nimport Utils from '../../utils';\r\nimport { Loader, Input, Dropdown } from 'semantic-ui-react';\r\nimport Avatar from '../Avatar';\r\n\r\nimport './styles.scss';\r\n\r\nexport default Utils.decorateWithMobX(props => {\r\n    const {\r\n        translation,\r\n        user,\r\n        recipient,\r\n        selectedUsers,\r\n        messages,\r\n        onLogout,\r\n        onSendMessage,\r\n    } = props;\r\n    return (\r\n        <Container className = 'home-container'>\r\n            <Row className = 'profile-tab user-profile-tab'>\r\n                <Col className = 'profile-avatar'>\r\n                    <Avatar firstLetter = {user.firstName[0].toUpperCase()}/>\r\n                </Col>\r\n                <Dropdown\r\n                    labeled\r\n                    button\r\n                    icon = 'setting'\r\n                >\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item\r\n                            onClick = {onLogout}\r\n                            text = {translation.getTranslation('logout')}\r\n                        />\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </Row>\r\n            <Row className = 'row-container'>\r\n\r\n                <Col className = 'scrollable user-container' xs = {3}>\r\n                    <Row className = 'user-search'>\r\n                        <Col>\r\n                            <Dropdown\r\n                                onSearchChange = {props.onUserSearch}\r\n                                onChange = {props.onUserDropdownOptionSelect}\r\n                                placeholder = {translation.getTranslation('searchPlaceholder')}\r\n                                fluid\r\n                                search\r\n                                selection\r\n                                value = {''}\r\n                                options = {props.userDropdownOptions}\r\n                                loading = {props.userSearchLoading}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    {selectedUsers}\r\n                </Col>\r\n                <Col className = 'message-container' xs = {9}>\r\n                    {\r\n                        recipient &&\r\n                            <Row className = 'profile-tab chat-profile-tab'>\r\n                                <Col>\r\n                                    <Avatar firstLetter = {recipient.firstName[0].toUpperCase()}/>\r\n                                </Col>\r\n                            </Row>\r\n                    }\r\n                    {\r\n                        recipient &&\r\n                            <Row onScroll = {props.onMessageScroll} className = 'scrollable messages'>\r\n                                <Col>\r\n                                    <Loader className = 'message-loader' active = {props.loaderActive}/>\r\n                                    {messages}\r\n                                </Col>\r\n                            </Row>\r\n                    }\r\n                    {\r\n                        recipient &&\r\n                            <Row className = 'send-message'>\r\n                                <Col>\r\n                                    <Input\r\n                                        onKeyDown = {onSendMessage}\r\n                                        className = 'message-input'\r\n                                        size = 'mini'\r\n                                        placeholder = {translation.getTranslation('typeMessagePlaceholder')}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n});\r\n","import UserCard from './UserCard';\r\n\r\nexport default UserCard;\r\n","import React from 'react';\r\nimport Utils from '../../utils';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport Avatar from '../Avatar';\r\n\r\nimport './styles.scss';\r\n\r\nexport default Utils.decorateWithMobX(props => {\r\n    let { user } = props;\r\n    let name = `${user.firstName} ${user.lastName}`;\r\n    const maxCharLength = 15;\r\n    if (name.length > maxCharLength) {\r\n        name = `${name.substring(0, maxCharLength)}...`;\r\n    }\r\n    return (\r\n        <Row style = {{ backgroundColor: props.selected ? '#f7f7f7' : 'white' }} className = 'user-card-container'>\r\n            <Col>\r\n                <div onClick = {() => props.onClick(user.email)} className = 'user-card'>\r\n                    <Avatar firstLetter = {name[0].toUpperCase()} size = 'medium'/>\r\n                    <div className = 'user-card-text-group'>\r\n                        <h1> {name} </h1>\r\n                    </div>\r\n                    <img onClick = {(event) => {\r\n                        // It's important to prevent this inner div event from bubbling up to the\r\n                        // onClick handler attached to the outer div.\r\n                        event.stopPropagation();\r\n                        props.onCloseUserCard(user.email);\r\n                    }} className = 'close-user-card' src = {require('../../assets/cancel.jpg')}/>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n});\r\n","import MessageCard from './MessageCard';\r\n\r\nexport default MessageCard;\r\n","import React, { Component } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nimport './styles.scss';\r\n\r\nexport default class MessageCard extends Component {\r\n    render () {\r\n        return (\r\n            <Row>\r\n                <div ref = {this.props.messageRef} className = {this.props.left ? 'message-card-container-left' : 'message-card-container-right'} xs = {1}>\r\n                    <Col className = {`message-card ${this.props.left ? 'message-card-left' : 'message-card-right'}`}>\r\n                        {\r\n                            this.props.username &&\r\n                                <h6 className = 'message-user'> {this.props.username} </h6>\r\n                        }\r\n                        <p>\r\n                            {this.props.message}\r\n                            <small>{this.props.timestamp}</small>\r\n                        </p>\r\n                    </Col>\r\n                </div>\r\n            </Row>\r\n        );\r\n    }\r\n};\r\n","import React, { Component } from 'react';\r\nimport socketIOClient from 'socket.io-client';\r\nimport Home from './Home';\r\nimport UserCard from '../UserCard';\r\nimport MessageCard from '../MessageCard';\r\nimport moment from 'moment';\r\nimport { MessageService, AuthenticationService, UserSearchService } from '../../services';\r\nimport { observer, inject } from 'mobx-react';\r\nimport { socketEndpoint, itemsPerPage } from '../../config.json';\r\n\r\n@inject('authentication')\r\n@observer\r\nclass HomeContainer extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.currentPage = 0;\r\n        this.state = {\r\n            messages: [],\r\n            userDropdownOptions: {},\r\n            selectedUsers: {},\r\n            userSearchLoading: false,\r\n            recipient: null,\r\n            loaderActive: false,\r\n        };\r\n        this.socket = socketIOClient(socketEndpoint);\r\n        this.socket.on(this.props.authentication.token, messageResponse => {\r\n            if (messageResponse.from !== this.props.authentication.email) {\r\n                const messages = [... this.state.messages];\r\n                messages.push(\r\n                    <MessageCard\r\n                        messageRef = {this.messageRef}\r\n                        key = {Math.random()}\r\n                        message = {messageResponse.message}\r\n                        timestamp = {moment().format('hh:mm a')}\r\n                        right = {messageResponse.from === this.props.authentication.email}\r\n                        left = {messageResponse.from !== this.props.authentication.email}\r\n                    />,\r\n                );\r\n                this.setMessagesState(messages);\r\n            }\r\n        });\r\n    }\r\n    async onLogout () {\r\n        const { authentication } = this.props;\r\n        try {\r\n            await AuthenticationService.logout(authentication.token);\r\n            authentication.refreshAuthentication();\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n    onMessageScroll (event) {\r\n        const yCoordinate = event.target && event.target.scrollTop;\r\n        this.scrollHeight = event.target && event.target.scrollHeight;\r\n        // Once all messages has been reached no need to make a request to the server.\r\n        if (\r\n            this.currentPage > 0 &&\r\n            yCoordinate === 0 &&\r\n            this.state.recipient &&\r\n            !this.state.recipient.allMessagesRetrieved &&\r\n            this.state.messages &&\r\n            this.state.messages.length >= itemsPerPage\r\n        ) {\r\n            this.setState({ loaderActive: true }, async () => {\r\n                try {\r\n                    const messagesResponse = await MessageService.getConversation(\r\n                        this.state.recipient.email,\r\n                        ++this.currentPage,\r\n                        itemsPerPage,\r\n                        this.props.authentication.token\r\n                    );\r\n                    if (messagesResponse && messagesResponse.length === 0) {\r\n                        return this.setState({\r\n                            loaderActive: false,\r\n                            recipient: { ... this.state.recipient, allMessagesRetrieved: true },\r\n                        });\r\n                    }\r\n                    this.setState({ loaderActive: false }, () => {\r\n                        const stateMessages = [... this.state.messages];\r\n                        const messages = [];\r\n                        for (let i = messagesResponse.length - 1; i >= 0; --i) {\r\n                            const messageResponse = messagesResponse[i];\r\n                            this.messageRef = React.createRef();\r\n                            messages.push(\r\n                                <MessageCard\r\n                                    messageRef = {this.messageRef}\r\n                                    key = {Math.random()}\r\n                                    message = {messageResponse.message}\r\n                                    timestamp = {moment().format('hh:mm a')}\r\n                                    right = {messageResponse.from === this.props.authentication.email}\r\n                                    left = {messageResponse.from !== this.props.authentication.email}\r\n                                />,\r\n                            );\r\n                        }\r\n                        if (this.state.recipient && !this.state.recipient.allMessagesRetrieved) {\r\n                            this.setState({\r\n                                messages: messages.concat(stateMessages),\r\n                            }, () => {\r\n                                this.messageRef.current.scrollIntoView();\r\n                            });\r\n                        }\r\n                    });\r\n                } catch (err) {\r\n                    this.setState({ loaderActive: false }, () => {\r\n                        throw err;\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onUserSearch (event) {\r\n        const { currentTarget: { value } } = event;\r\n        if (value) {\r\n            this.setState({ userSearchLoading: true }, async () => {\r\n                const { authentication } = this.props;\r\n                try {\r\n                    const results = await UserSearchService.search(value, authentication.token);\r\n                    const userDropdownOptions = {};\r\n                    results.forEach(result => {\r\n                        const { email } = result;\r\n                        userDropdownOptions[email] = result;\r\n                    });\r\n                    this.setState({\r\n                        userSearchLoading: false,\r\n                        userDropdownOptions,\r\n                    });\r\n                } catch (err) {\r\n                    this.setState({ userSearchLoading: false });\r\n                    throw err;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    async onUserDropdownOptionSelect (event, { value: email }) {\r\n        const { key } = event;\r\n        if (key !== 'ArrowDown' && key !== 'ArrowUp') {\r\n            const user = this.state.userDropdownOptions[email];\r\n            const selectedUsers = { ... this.state.selectedUsers };\r\n            let states = { recipient: user, userDropdownOptions: {} };\r\n            if (!(user.email in this.state.selectedUsers)) {\r\n                selectedUsers[email] = user;\r\n                states.selectedUsers = selectedUsers;\r\n            }\r\n            this.setMessages(email, states);\r\n        }\r\n    }\r\n    async onUserClick (email) {\r\n        this.setState({ recipient: this.state.selectedUsers[email] });\r\n        this.setMessages(email);\r\n    }\r\n    setMessagesState (messages, otherOptions) {\r\n        this.setState({ messages, ... otherOptions }, () => {\r\n            // Scroll into view will use the scroll bar of the nearest parent which is scrollable.\r\n            this.messageRef && this.messageRef.current && this.messageRef.current.scrollIntoView();\r\n        });\r\n    }\r\n    setMessages (email, otherOptions) {\r\n        this.setState({ loaderActive: true }, async () => {\r\n            try {\r\n                const messagesResponse = await MessageService.getConversation(\r\n                    email, 1,\r\n                    itemsPerPage,\r\n                    this.props.authentication.token\r\n                );\r\n                this.setState({ loaderActive: false }, () => {\r\n                    this.currentPage = 1;\r\n                    const messages = [];\r\n                    for (let i = messagesResponse.length - 1; i >= 0; --i) {\r\n                        const messageResponse = messagesResponse[i];\r\n                        this.messageRef = React.createRef();\r\n                        messages.push(\r\n                            <MessageCard\r\n                                messageRef = {this.messageRef}\r\n                                key = {Math.random()}\r\n                                message = {messageResponse.message}\r\n                                timestamp = {moment().format('hh:mm a')}\r\n                                right = {messageResponse.from === this.props.authentication.email}\r\n                                left = {messageResponse.from !== this.props.authentication.email}\r\n                            />,\r\n                        );\r\n                    }\r\n                    this.setMessagesState(messages, otherOptions);\r\n                });\r\n            } catch (err) {\r\n                this.setState({ loaderActive: true }, () => {\r\n                    throw err;\r\n                });\r\n            }\r\n        });\r\n    }\r\n    async sendMessage (event) {\r\n        const { currentTarget: { value } } = event;\r\n        event.currentTarget.value = '';\r\n        try {\r\n            const res = await MessageService.sendMessage({\r\n                to: this.state.recipient.email,\r\n                message: value,\r\n            }, this.props.authentication.token);\r\n            if (res.status >= 200) {\r\n                this.messageRef = React.createRef();\r\n                const messages = [... this.state.messages];\r\n                messages.push(\r\n                    <MessageCard\r\n                        messageRef = {this.messageRef}\r\n                        key = {Math.random()}\r\n                        message = {value}\r\n                        timestamp = {moment().format('hh:mm a')}\r\n                        right\r\n                    />,\r\n                );\r\n                this.setMessagesState(messages);\r\n            }\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n    onSendMessage (event) {\r\n        if (event.key === 'Enter') {\r\n            this.sendMessage(event);\r\n        }\r\n    }\r\n    onCloseUserCard (email) {\r\n        const selectedUsers = { ... this.state.selectedUsers };\r\n        delete selectedUsers[email];\r\n        let recipient = this.state.recipient;\r\n        if (\r\n            recipient &&\r\n            typeof recipient === 'object' &&\r\n            recipient.email === email\r\n        ) {\r\n            recipient = null;\r\n            this.currentPage = 0;\r\n        }\r\n        this.setState({\r\n            selectedUsers,\r\n            recipient,\r\n        });\r\n    }\r\n    render () {\r\n        const { authentication: { id, email, firstName, lastName } } = this.props;\r\n        return (\r\n            <Home\r\n                user = {{ id, email, firstName, lastName }}\r\n                recipient = {this.state.recipient}\r\n                selectedUsers = {Object.keys(this.state.selectedUsers).map(key => {\r\n                    const user = this.state.selectedUsers[key];\r\n                    return (\r\n                        <UserCard\r\n                            onClick = {this.onUserClick.bind(this)}\r\n                            key = {user.id}\r\n                            user = {user}\r\n                            selected = {user.email === (this.state.recipient && this.state.recipient.email)}\r\n                            onCloseUserCard = {this.onCloseUserCard.bind(this)}\r\n                        />\r\n                    );\r\n                })}\r\n                userDropdownOptions = {Object.keys(this.state.userDropdownOptions).map(key => {\r\n                    const result = this.state.userDropdownOptions[key];\r\n                    const { id, email, firstName, lastName } = result;\r\n                    return {\r\n                        key: id,\r\n                        value: email,\r\n                        text: `${firstName} ${lastName}`,\r\n                    };\r\n                })}\r\n                userSearchLoading = {this.state.userSearchLoading}\r\n                messages = {this.state.messages}\r\n                onSendMessage = {this.onSendMessage.bind(this)}\r\n                onLogout = {this.onLogout.bind(this)}\r\n                onUserSearch = {this.onUserSearch.bind(this)}\r\n                onUserDropdownOptionSelect = {this.onUserDropdownOptionSelect.bind(this)}\r\n                onMessageScroll = {this.onMessageScroll.bind(this)}\r\n                loaderActive = {this.state.loaderActive}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomeContainer;\r\n","import React from 'react';\r\nimport { Redirect, Switch, Route } from 'react-router-dom';\r\nimport Authentication from './components/Authentication';\r\nimport Home from './components/Home';\r\nimport Utils from './utils';\r\n\r\nexport default Utils.decorateWithMobX(props => {\r\n    const { authentication } = props;\r\n    return (\r\n        <Switch>\r\n            <Route path = \"/login\">\r\n                <Authentication />\r\n            </Route>\r\n            <Route path = \"/register\">\r\n                <Authentication register />\r\n            </Route>\r\n            <Route path = \"/home\">\r\n                {\r\n                    authentication.token\r\n                        ? <Home />\r\n                        : <Redirect to = '/login'/>\r\n                }\r\n            </Route>\r\n            <Route path = \"/\">\r\n                {\r\n                    authentication.nonObservableToken\r\n                        ? <Redirect to = '/home'/>\r\n\r\n                        : <Redirect to = 'login'/>\r\n                }\r\n            </Route>\r\n        </Switch>\r\n    );\r\n});\r\n","const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register (config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                checkValidServiceWorker(swUrl, config);\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW (swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            console.log('Content is cached for offline use.');\n\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n    fetch(swUrl)\n        .then(response => {\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister () {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n","import React from 'react';\r\nimport { Provider } from 'mobx-react';\r\nimport { MessageStore, TranslationStore, AuthenticationStore } from './store';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport TranslationSwitch from './components/TranslationSwitch';\r\nimport Routes from './Routes';\r\n\r\nexport default () => {\r\n    return (\r\n        <Router>\r\n            <Provider\r\n                message = { new MessageStore() }\r\n                authentication = { new AuthenticationStore() }\r\n                translation = { new TranslationStore() }\r\n            >\r\n                <TranslationSwitch />\r\n                <Routes />\r\n            </Provider>\r\n        </Router>\r\n    );\r\n};\r\n"],"sourceRoot":""}